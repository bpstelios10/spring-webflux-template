import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.1.1'
    }
}

plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    compile("org.springframework.boot:spring-boot-starter-webflux:${versions.springBoot}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${versions.springBoot}") {
        exclude group: 'io.micrometer', module: 'micrometer-core'
    }
    compile 'io.micrometer:micrometer-registry-prometheus:1.0.7'
    compile 'com.fasterxml.jackson:jackson-bom:2.9.8'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'io.prometheus:simpleclient_hotspot:0.6.0'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.json:json:20200518'

    testImplementation "org.springframework.boot:spring-boot-starter-test:${versions.springBoot}"
    testImplementation 'io.projectreactor:reactor-test'
    testCompile "org.mockito:mockito-core:3.2.0"
    testCompile "org.mockito:mockito-junit-jupiter:3.2.0"
    testCompile "net.bytebuddy:byte-buddy:1.10.6" //for some reason it is needed but not included in mockito-core
    testCompile "org.junit.jupiter:junit-jupiter-api:${versions.junit.jupiter}"
    testCompile "org.junit.jupiter:junit-jupiter-engine:${versions.junit.jupiter}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${versions.junit.jupiter}"
}

project.ext {
    imageName = 'spring-boot-webflux-template'
    dockerUsername = 'xxxx'
    dockerPassword = 'xxxx'
    dockerEmail = 'xxxx'
}
project.version = project.properties.getOrDefault('testVersion', "0.3.0")

jar {
    enabled = true
}

bootJar {
    baseName = 'service'
    version = ''
}

test {
    useJUnitPlatform()
}

docker {
    registryCredentials {
        url = 'docker.io'
        username = System.getenv('DOCKER_USERNAME') ?: project.ext.dockerUsername
        password = System.getenv('DOCKER_PASSWORD') ?: project.ext.dockerPassword
        email = System.getenv('DOCKER_EMAIL') ?: project.ext.dockerEmail
    }
}
task buildImage(type: DockerBuildImage) {
    inputDir = file(projectDir)
    images.add("bpstelios10/$project.ext.imageName:$project.version")
}
task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    images.set(buildImage.images)
}
task removeImage(type: DockerRemoveImage) {
    dependsOn pushImage
    force = true
    targetImageId buildImage.getImageId()
}
task pullImage(type: DockerPullImage) {
    dependsOn removeImage
    image = "bpstelios10/$project.ext.imageName:$project.version"
}
