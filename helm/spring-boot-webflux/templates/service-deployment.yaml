apiVersion: v1
kind: Service
metadata:
  name: spring-boot-webflux
  namespace: {{ .Values.namespace }}
  labels:
    app: spring-boot-webflux
spec:
  ports:
  - port: 8080
    name: client
  selector:
    app: spring-boot-webflux
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-webflux
  namespace: {{ .Values.namespace }}
  labels:
    app: spring-boot-webflux
spec:
  replicas: {{ .Values.service.replicasCount }}
  selector:
    matchLabels:
      app: spring-boot-webflux
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: spring-boot-webflux
    spec:
      containers:
      - name: spring-boot-webflux
        image: {{ .Values.service.image.repository }}
        resources:
          limits:
            memory: "512Mi"
          requests:
            memory: "512Mi"
            cpu: 0
#        readinessProbe:
#          httpGet:
#            path: /private/status
#            port: 8080
#          initialDelaySeconds: 15
#          timeoutSeconds: 1
#        livenessProbe:
#          httpGet:
#            path: /private/status
#            port: 8080
#          initialDelaySeconds: 30
#          timeoutSeconds: 1
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30